{"cells":[{"cell_type":"code","execution_count":104,"metadata":{"id":"fKwllh_xLhB3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1653243097388,"user_tz":-120,"elapsed":4086,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"449daead-26e5-470c-aeb7-3b3b2a030dd8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#Importing relevant libraries and packages\n","\n","import pandas as pd\n","import numpy as np\n","from google.colab import drive\n","import matplotlib.pyplot as plt\n","import datetime as dt\n","from datetime import time\n","from datetime import timedelta\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn import metrics \n","from sklearn.metrics import precision_recall_curve, confusion_matrix, accuracy_score\n","import seaborn as sns\n","from sklearn.decomposition import PCA\n","\n","drive.mount(\"/content/drive\", force_remount=True)"]},{"cell_type":"code","execution_count":105,"metadata":{"id":"8NzTPkRQQeph","executionInfo":{"status":"ok","timestamp":1653243120174,"user_tz":-120,"elapsed":22790,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}}},"outputs":[],"source":["#Importing train and test dataset\n","\n","transactions_train_df = pd.read_csv(\"/content/drive/MyDrive/Code Girls First/Project/Data/Simulated Fraud/fraudTrain.csv\", parse_dates=[\"trans_date_trans_time\"])\n","transactions_test_df = pd.read_csv(\"/content/drive/MyDrive/Code Girls First/Project/Data/Simulated Fraud/fraudTest.csv\", parse_dates=[\"trans_date_trans_time\"])"]},{"cell_type":"code","execution_count":106,"metadata":{"id":"gUOPTlm3SxGa","executionInfo":{"status":"ok","timestamp":1653243120787,"user_tz":-120,"elapsed":629,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}}},"outputs":[],"source":["#Appending both datasets\n","\n","df = transactions_train_df.append(transactions_test_df, ignore_index=True)"]},{"cell_type":"markdown","source":[""],"metadata":{"id":"VFjz7pYP_BIq"}},{"cell_type":"code","source":["#Verifying the columns available\n","\n","df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nAjGH7HXo3hJ","executionInfo":{"status":"ok","timestamp":1653243120788,"user_tz":-120,"elapsed":13,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"5cc67f6b-fd1b-4f76-d005-d9473e05982a"},"execution_count":107,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Unnamed: 0', 'trans_date_trans_time', 'cc_num', 'merchant', 'category',\n","       'amt', 'first', 'last', 'gender', 'street', 'city', 'state', 'zip',\n","       'lat', 'long', 'city_pop', 'job', 'dob', 'trans_num', 'unix_time',\n","       'merch_lat', 'merch_long', 'is_fraud'],\n","      dtype='object')"]},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":["#Displaying dataset\n","\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":594},"id":"OUzQxNM_OSwv","executionInfo":{"status":"ok","timestamp":1653243120788,"user_tz":-120,"elapsed":10,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"30e5cfd9-41a1-4740-c9ed-7e5523720a61"},"execution_count":108,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0 trans_date_trans_time            cc_num  \\\n","0           0   2019-01-01 00:00:18  2703186189652095   \n","1           1   2019-01-01 00:00:44      630423337322   \n","2           2   2019-01-01 00:00:51    38859492057661   \n","3           3   2019-01-01 00:01:16  3534093764340240   \n","4           4   2019-01-01 00:03:06   375534208663984   \n","\n","                             merchant       category     amt      first  \\\n","0          fraud_Rippin, Kub and Mann       misc_net    4.97   Jennifer   \n","1     fraud_Heller, Gutmann and Zieme    grocery_pos  107.23  Stephanie   \n","2                fraud_Lind-Buckridge  entertainment  220.11     Edward   \n","3  fraud_Kutch, Hermiston and Farrell  gas_transport   45.00     Jeremy   \n","4                 fraud_Keeling-Crist       misc_pos   41.96      Tyler   \n","\n","      last gender                        street  ...      lat      long  \\\n","0    Banks      F                561 Perry Cove  ...  36.0788  -81.1781   \n","1     Gill      F  43039 Riley Greens Suite 393  ...  48.8878 -118.2105   \n","2  Sanchez      M      594 White Dale Suite 530  ...  42.1808 -112.2620   \n","3    White      M   9443 Cynthia Court Apt. 038  ...  46.2306 -112.1138   \n","4   Garcia      M              408 Bradley Rest  ...  38.4207  -79.4629   \n","\n","   city_pop                                job         dob  \\\n","0      3495          Psychologist, counselling  1988-03-09   \n","1       149  Special educational needs teacher  1978-06-21   \n","2      4154        Nature conservation officer  1962-01-19   \n","3      1939                    Patent attorney  1967-01-12   \n","4        99     Dance movement psychotherapist  1986-03-28   \n","\n","                          trans_num   unix_time  merch_lat  merch_long  \\\n","0  0b242abb623afc578575680df30655b9  1325376018  36.011293  -82.048315   \n","1  1f76529f8574734946361c461b024d99  1325376044  49.159047 -118.186462   \n","2  a1a22d70485983eac12b5b88dad1cf95  1325376051  43.150704 -112.154481   \n","3  6b849c168bdad6f867558c3793159a81  1325376076  47.034331 -112.561071   \n","4  a41d7549acf90789359a9aa5346dcb46  1325376186  38.674999  -78.632459   \n","\n","   is_fraud  \n","0         0  \n","1         0  \n","2         0  \n","3         0  \n","4         0  \n","\n","[5 rows x 23 columns]"],"text/html":["\n","  <div id=\"df-b0610e60-9671-4b59-9c64-746c00430065\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>trans_date_trans_time</th>\n","      <th>cc_num</th>\n","      <th>merchant</th>\n","      <th>category</th>\n","      <th>amt</th>\n","      <th>first</th>\n","      <th>last</th>\n","      <th>gender</th>\n","      <th>street</th>\n","      <th>...</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>job</th>\n","      <th>dob</th>\n","      <th>trans_num</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>is_fraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2019-01-01 00:00:18</td>\n","      <td>2703186189652095</td>\n","      <td>fraud_Rippin, Kub and Mann</td>\n","      <td>misc_net</td>\n","      <td>4.97</td>\n","      <td>Jennifer</td>\n","      <td>Banks</td>\n","      <td>F</td>\n","      <td>561 Perry Cove</td>\n","      <td>...</td>\n","      <td>36.0788</td>\n","      <td>-81.1781</td>\n","      <td>3495</td>\n","      <td>Psychologist, counselling</td>\n","      <td>1988-03-09</td>\n","      <td>0b242abb623afc578575680df30655b9</td>\n","      <td>1325376018</td>\n","      <td>36.011293</td>\n","      <td>-82.048315</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2019-01-01 00:00:44</td>\n","      <td>630423337322</td>\n","      <td>fraud_Heller, Gutmann and Zieme</td>\n","      <td>grocery_pos</td>\n","      <td>107.23</td>\n","      <td>Stephanie</td>\n","      <td>Gill</td>\n","      <td>F</td>\n","      <td>43039 Riley Greens Suite 393</td>\n","      <td>...</td>\n","      <td>48.8878</td>\n","      <td>-118.2105</td>\n","      <td>149</td>\n","      <td>Special educational needs teacher</td>\n","      <td>1978-06-21</td>\n","      <td>1f76529f8574734946361c461b024d99</td>\n","      <td>1325376044</td>\n","      <td>49.159047</td>\n","      <td>-118.186462</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2019-01-01 00:00:51</td>\n","      <td>38859492057661</td>\n","      <td>fraud_Lind-Buckridge</td>\n","      <td>entertainment</td>\n","      <td>220.11</td>\n","      <td>Edward</td>\n","      <td>Sanchez</td>\n","      <td>M</td>\n","      <td>594 White Dale Suite 530</td>\n","      <td>...</td>\n","      <td>42.1808</td>\n","      <td>-112.2620</td>\n","      <td>4154</td>\n","      <td>Nature conservation officer</td>\n","      <td>1962-01-19</td>\n","      <td>a1a22d70485983eac12b5b88dad1cf95</td>\n","      <td>1325376051</td>\n","      <td>43.150704</td>\n","      <td>-112.154481</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2019-01-01 00:01:16</td>\n","      <td>3534093764340240</td>\n","      <td>fraud_Kutch, Hermiston and Farrell</td>\n","      <td>gas_transport</td>\n","      <td>45.00</td>\n","      <td>Jeremy</td>\n","      <td>White</td>\n","      <td>M</td>\n","      <td>9443 Cynthia Court Apt. 038</td>\n","      <td>...</td>\n","      <td>46.2306</td>\n","      <td>-112.1138</td>\n","      <td>1939</td>\n","      <td>Patent attorney</td>\n","      <td>1967-01-12</td>\n","      <td>6b849c168bdad6f867558c3793159a81</td>\n","      <td>1325376076</td>\n","      <td>47.034331</td>\n","      <td>-112.561071</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2019-01-01 00:03:06</td>\n","      <td>375534208663984</td>\n","      <td>fraud_Keeling-Crist</td>\n","      <td>misc_pos</td>\n","      <td>41.96</td>\n","      <td>Tyler</td>\n","      <td>Garcia</td>\n","      <td>M</td>\n","      <td>408 Bradley Rest</td>\n","      <td>...</td>\n","      <td>38.4207</td>\n","      <td>-79.4629</td>\n","      <td>99</td>\n","      <td>Dance movement psychotherapist</td>\n","      <td>1986-03-28</td>\n","      <td>a41d7549acf90789359a9aa5346dcb46</td>\n","      <td>1325376186</td>\n","      <td>38.674999</td>\n","      <td>-78.632459</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 23 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0610e60-9671-4b59-9c64-746c00430065')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b0610e60-9671-4b59-9c64-746c00430065 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b0610e60-9671-4b59-9c64-746c00430065');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":108}]},{"cell_type":"code","source":["#Verifying the datatypes in the dataset\n","\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vkA251kOP75V","executionInfo":{"status":"ok","timestamp":1653243120789,"user_tz":-120,"elapsed":9,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"c93769d4-985b-4579-b220-a0b831f2029c"},"execution_count":109,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1852394 entries, 0 to 1852393\n","Data columns (total 23 columns):\n"," #   Column                 Dtype         \n","---  ------                 -----         \n"," 0   Unnamed: 0             int64         \n"," 1   trans_date_trans_time  datetime64[ns]\n"," 2   cc_num                 int64         \n"," 3   merchant               object        \n"," 4   category               object        \n"," 5   amt                    float64       \n"," 6   first                  object        \n"," 7   last                   object        \n"," 8   gender                 object        \n"," 9   street                 object        \n"," 10  city                   object        \n"," 11  state                  object        \n"," 12  zip                    int64         \n"," 13  lat                    float64       \n"," 14  long                   float64       \n"," 15  city_pop               int64         \n"," 16  job                    object        \n"," 17  dob                    object        \n"," 18  trans_num              object        \n"," 19  unix_time              int64         \n"," 20  merch_lat              float64       \n"," 21  merch_long             float64       \n"," 22  is_fraud               int64         \n","dtypes: datetime64[ns](1), float64(5), int64(6), object(11)\n","memory usage: 325.1+ MB\n"]}]},{"cell_type":"code","source":["#Verifying the existence of null values \n","\n","df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rOU_bV7UX6SZ","executionInfo":{"status":"ok","timestamp":1653243122009,"user_tz":-120,"elapsed":1227,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"fed42236-89de-42b1-a2aa-a658cdce9bc0"},"execution_count":110,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Unnamed: 0               0\n","trans_date_trans_time    0\n","cc_num                   0\n","merchant                 0\n","category                 0\n","amt                      0\n","first                    0\n","last                     0\n","gender                   0\n","street                   0\n","city                     0\n","state                    0\n","zip                      0\n","lat                      0\n","long                     0\n","city_pop                 0\n","job                      0\n","dob                      0\n","trans_num                0\n","unix_time                0\n","merch_lat                0\n","merch_long               0\n","is_fraud                 0\n","dtype: int64"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["#Creating new variables from existing data\n","\n","##1 - Business hours / Non business hours\n","\n","### Creating a column for business_hour with zero as default\n","df[\"business_hour\"] = int(0)\n","\n","###Considering business hours between 8:00-19:00\n","start = dt.datetime.strptime(\"08:00:00\", \"%H:%M:%S\").time()\n","end = dt.datetime.strptime(\"19:00:00\", \"%H:%M:%S\").time()\n","\n","###Defining a mask for the query that catches data within the defined range\n","businessHour_mask = df[\"trans_date_trans_time\"].dt.time.between(start, end)\n","\n","###Setting numbers that fit into encoding to 1\n","df[\"business_hour\"][businessHour_mask] = 1\n","\n","##2 - Weekdays / Weekends\n","\n","### Defining weekdays bin, being weekdays from Monday to Friday (0-4) and weekends Saturday and Sunday (5-6). Weekdays will be labelled as 1 and weekends as 0\n","weekDay_list = [0,1,2,3,4]\n","weekEnd_list = [5,6]\n","\n","###Creating a new column is_weekday\n","\n","df[\"is_weekday\"] = int(0)\n","\n","###Applying the weekday rule into the dataset\n","df[\"is_weekday\"][df[\"trans_date_trans_time\"].dt.weekday.isin(weekDay_list)] = 1\n","df[\"is_weekday\"][df[\"trans_date_trans_time\"].dt.weekday.isin(weekEnd_list)] = 0\n","\n","\n","##3 - Months\n","\n","###Extracting the month\n","df[\"month\"] = df[\"trans_date_trans_time\"].dt.strftime(\"%m\")\n","\n","##4 - Time since las transaction in the same card\n","\n","###Creating a function to parse time difference between rows\n","\n","def time_difference(df):\n","  df[\"time_diff\"] = df[\"unix_time\"] - df[\"unix_time\"].shift()\n","  return df\n","\n","###Applying the function to dataset grouped by creditcard number\n","\n","df = df.groupby(\"cc_num\").apply(time_difference)\n","\n","###Replacing NaN with zeroes\n","df['time_diff'] = df['time_diff'].fillna(0)\n","\n","##5 - Frequency of transacations in the same card in time intervals of 1 and 7 days\n","\n","###Creating functions to extract frequency of transactions in the time intervals\n","def last_day(df):\n","    temp = pd.Series(df.index, index = df[\"trans_date_trans_time\"], name='count_1_day').sort_index()\n","    count_1_day = temp.rolling('1d').count() - 1\n","    count_1_day.index = temp.values\n","    df['count_1_day'] = count_1_day.reindex(df.index)\n","    return df\n","\n","def last_week(df):\n","    temp = pd.Series(df.index, index = df[\"trans_date_trans_time\"], name='count_7_days').sort_index()\n","    count_7_days = temp.rolling('7d').count() - 1\n","    count_7_days.index = temp.values\n","    df['count_7_days'] = count_7_days.reindex(df.index)\n","    return df\n","\n","###Applying functions to dataframe\n","\n","df = df.groupby('cc_num').apply(last_day)\n","df = df.groupby('cc_num').apply(last_week)\n","\n","##6 - Numeric age\n","\n","###Transforming date of birth into numeric age\n","yearCharacters = 4\n","currentYear = int(dt.datetime.now().strftime(\"%Y\"))\n","\n","df[\"age\"] = currentYear - df[\"dob\"].str[:yearCharacters].astype(int)\n","\n","###Dropping the original column \"dob\"\n","df.drop(['dob'], axis=1, inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dlLJYKb61M-8","executionInfo":{"status":"ok","timestamp":1653243191566,"user_tz":-120,"elapsed":69562,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"5d825f32-948e-4469-9f78-4945cfe08769"},"execution_count":111,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  app.launch_new_instance()\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:30: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"]}]},{"cell_type":"code","execution_count":112,"metadata":{"id":"0rkZIxsR2RER","executionInfo":{"status":"ok","timestamp":1653243197383,"user_tz":-120,"elapsed":691,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}}},"outputs":[],"source":["#Removing irrelevant variables\n","\n","irrelevantVar_list = [\"first\",\n","                      \"last\", \n","                      \"street\", \n","                      \"zip\",\n","                      \"lat\",\n","                      \"job\",\n","                      \"long\",\n","                      \"cc_num\", \n","                      \"unix_time\",\n","                      \"trans_date_trans_time\",\n","                      \"trans_num\", \n","                      \"merch_lat\",\n","                      \"merch_long\"]\n","\n","df.drop(irrelevantVar_list, axis=1, inplace=True)"]},{"cell_type":"code","execution_count":113,"metadata":{"executionInfo":{"elapsed":4825,"status":"ok","timestamp":1653243204683,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"},"user_tz":-120},"id":"3wotzKbAPl2L"},"outputs":[],"source":["#Encoding variables\n","\n","##1 - Target Encoding merchant categories\n","\n","###Getting the means for each category\n","merchantMeans_dict = df.groupby('category')['is_fraud'].mean().to_dict()\n","\n","###Replacing the categorical labels with the means\n","df['category'] = df['category'].map(merchantMeans_dict)\n","\n","##2 - Target Encoding states\n","\n","###Getting the means for each state\n","statetMeans_dict = df.groupby('state')['is_fraud'].mean().to_dict()\n","\n","###Replacing the categorical labels with the means\n","df['state'] = df['state'].map(statetMeans_dict)\n","\n","\n","##3 - Target Encoding cities\n","\n","cityMeans_dict = df.groupby('city')['is_fraud'].mean().to_dict()\n","\n","\n","df[\"city\"] =  df[\"city\"].map(cityMeans_dict)\n","\n","##4 - Target Encoding the merchant\n","\n","merchantMeans_dict = df.groupby(\"merchant\")['is_fraud'].mean().to_dict()\n","\n","df[\"merchant\"] = df['merchant'].map(merchantMeans_dict)\n","\n","##5 - Label encoding Male / Female\n","\n","###Defining 1 as male and 2 as female and replacing values\n","df[\"gender\"].replace('F', 0, inplace=True)\n","df[\"gender\"].replace('M', 1, inplace=True)"]},{"cell_type":"code","execution_count":114,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4381,"status":"ok","timestamp":1653243209059,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"},"user_tz":-120},"id":"nMvFODnKSx1z","outputId":"9fb0f081-5952-4f0e-abdc-ba8ebc477b39"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train Dataset :  (1296675, 14)\n","Test Dataset :  (555719, 14)\n"]}],"source":["#Separating the data into train and test\n","\n","##1 - Separating X and y\n","X = df.drop([\"is_fraud\", \"Unnamed: 0\"], axis=1)\n","y = df['is_fraud']\n","\n","##2 - Splitting dataset into train and test\n","X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, stratify=y, random_state=100)\n","\n","##3 - Inspecting train and test datasets\n","print ('Train Dataset : ', X_train.shape)\n","print ('Test Dataset : ', X_test.shape)"]},{"cell_type":"code","execution_count":115,"metadata":{"id":"hpJ3y8z5UJl3","executionInfo":{"status":"ok","timestamp":1653243242304,"user_tz":-120,"elapsed":30226,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}}},"outputs":[],"source":["#Fitting the model into the data\n","\n","clf_en = DecisionTreeClassifier(random_state=0)\n","clf_en.fit(X_train, y_train)\n","\n","#Predicting fraudulent transactions \n","\n","y_pred = clf_en.predict(X_test)"]},{"cell_type":"code","source":["#Verifying the results\n","\n","print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n","print(\"Precision:\",metrics.precision_score(y_test, y_pred))\n","print(\"Recall:\",metrics.recall_score(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VsYER1CM8Eo5","executionInfo":{"status":"ok","timestamp":1653243247824,"user_tz":-120,"elapsed":1327,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"55ad69f8-0f30-4577-d210-314af11b695c"},"execution_count":116,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9969121084576917\n","Precision: 0.6965655218406135\n","Recall: 0.7215889464594127\n"]}]},{"cell_type":"code","execution_count":118,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":315,"status":"ok","timestamp":1653243256954,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"},"user_tz":-120},"id":"RK-MRPIKyOM_","outputId":"9c8f7140-2a34-4dc9-af5a-4adb11ed241d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[551914,    910],\n","       [   806,   2089]])"]},"metadata":{},"execution_count":118}],"source":["#Plotting a confusion matrix to visualize the performance. \n","cnf_matrix = metrics.confusion_matrix(y_test, y_pred)\n","cnf_matrix"]},{"cell_type":"code","source":["# Showing confusion matrix as a heatmap\n","\n","class_names=[0,1] # name  of classes\n","fig, ax = plt.subplots()\n","tick_marks = np.arange(len(class_names))\n","plt.xticks(tick_marks, class_names)\n","plt.yticks(tick_marks, class_names)\n","# create heatmap\n","sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n","ax.xaxis.set_label_position(\"top\")\n","plt.tight_layout()\n","plt.title('Confusion matrix', y=1.1)\n","plt.ylabel('Fraud label', fontsize=14)\n","plt.xlabel('Predicted label', fontsize=14)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"zgDL1tXj9dLr","executionInfo":{"status":"ok","timestamp":1653243268174,"user_tz":-120,"elapsed":825,"user":{"displayName":"Juliana Novaes Bueno de Camargo","userId":"11868668870294892696"}},"outputId":"5e6600a4-485b-47c4-abe2-6333f4c5dee2"},"execution_count":119,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 257.44, 'Predicted label')"]},"metadata":{},"execution_count":119},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"idvZ9PdG-u-a"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"name":"fraud_prediction - Juliana. ipynb","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}